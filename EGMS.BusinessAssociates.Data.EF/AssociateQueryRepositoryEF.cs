using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using AutoMapper;using EGMS.BusinessAssociates.Domain;using EGMS.BusinessAssociates.Query;using EGMS.BusinessAssociates.Query.ReadModels;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Logging;namespace EGMS.BusinessAssociates.Data.EF{    public class AssociateQueryRepositoryEF : IAssociateQueryRepository    {        private readonly BusinessAssociatesContext _context;        // TO DO:  Need to use logging        // ReSharper disable once NotAccessedField.Local#pragma warning disable 169        private readonly ILogger _log;#pragma warning restore 169        private readonly IMapper _mapper;        public AssociateQueryRepositoryEF(BusinessAssociatesContext context, IMapper mapper)        {            _context = context;            _mapper = mapper;            _context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;        }        public Task<AssociateRM> GetAssociate(int associateId)        {            return Task.FromResult(                _mapper.Map<Associate, AssociateRM>(_context.Associates.SingleOrDefault(a => a.Id == associateId)));        }        public Task<IEnumerable<AssociateRM>> GetAssociates()        {            return Task.FromResult(_mapper.Map<IEnumerable<AssociateRM>>(_context.Associates.ToList()));        }        public Task<PagedGridResult<IEnumerable<AssociateRM>>> GetAssociates(QueryModels.AssociateQueryParams queryParams)        {            return Task.FromResult(new PagedGridResult<IEnumerable<AssociateRM>>            {                Data = _mapper.Map<IEnumerable<AssociateRM>>(_context.Associates.ApplyQuery(queryParams).ToList()),                Total = IsPaged(queryParams)                    ? _context.Associates.ApplyQuery(queryParams, false).Count()                    : _context.Associates.Count            });        }        public Task<AddressRM> GetAddress(int addressId)        {            return Task.FromResult(_mapper.Map<AddressRM>(_context.Addresses.SingleOrDefault(a => a.Id == addressId)));        }        public Task<IEnumerable<AddressRM>> GetAddresses()        {            return Task.FromResult(_mapper.Map<IEnumerable<AddressRM>>(_context.Addresses.ToList()));        }        public Task<PagedGridResult<IEnumerable<AddressRM>>> GetAddresses(QueryModels.AddressQueryParams queryParams)        {            List<Address> addresses = _context.Addresses.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<AddressRM>>            {                Data = _mapper.Map<IEnumerable<AddressRM>>(addresses),                Total = IsPaged(queryParams)                    ? _context.Addresses.ApplyQuery(queryParams, false).Count()                    : addresses.Count            });        }#pragma warning disable 1998        public Task<PagedGridResult<IEnumerable<AddressRM>>> GetAddressesForAssociate(int associateId)#pragma warning restore 1998        {            ValidateAssociateExists(associateId);            List<AssociateAddress> associateAddresses = ValidateAssociateAddressesExist(associateId);            List<Address> addresses = associateAddresses                .Select(associateAddress => _context.Addresses.SingleOrDefault(a => a.Id == associateAddress.AddressId))                .Where(user => user != null).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<AddressRM>>            {                Data = _mapper.Map<IEnumerable<AddressRM>>(addresses),                Total = addresses.Count            });        }        public Task<AddressRM> GetAddressForContact(int contactId, int addressId)        {            ValidateContactExists(contactId);            ContactAddress contactAddress =                _context.ContactAddresses.SingleOrDefault(ca => ca.ContactId == contactId && ca.AddressId == addressId);            if (contactAddress == null)                throw new InvalidOperationException("Specified address not found for specified contact.");            return Task.FromResult(_mapper.Map<AddressRM>(_context.Addresses.SingleOrDefault(a => a.Id == addressId)));        }#pragma warning disable 1998        public async Task<PagedGridResult<IEnumerable<AddressRM>>> GetAddressesForContact(int associateId, int contactId)#pragma warning restore 1998        {            ValidateAssociateExists(associateId);            List<ContactAddress> contactAddresses = ValidateContactAddressesExist(contactId);            List<Address> addresses = contactAddresses                .Select(contactAddress => _context.Addresses.SingleOrDefault(a => a.Id == contactAddress.AddressId))                .Where(user => user != null).ToList();            return new PagedGridResult<IEnumerable<AddressRM>>            {                Data = _mapper.Map<IEnumerable<AddressRM>>(addresses),                Total = addresses.Count            };        }        public Task<IEnumerable<AgentRelationshipRM>> GetAgentRelationships()        {            return Task.FromResult(_mapper.Map<IEnumerable<AgentRelationshipRM>>(_context.AgentRelationships.ToList()));        }        public Task<PagedGridResult<IEnumerable<AgentRelationshipRM>>> GetAgentRelationships(            QueryModels.AgentRelationshipQueryParams queryParams)        {            List<AgentRelationship> agentRelationships = _context.AgentRelationships.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<AgentRelationshipRM>>            {                Data = _mapper.Map<IEnumerable<AgentRelationshipRM>>(agentRelationships),                Total = IsPaged(queryParams)                    ? _context.AgentRelationships.ApplyQuery(queryParams, false).Count()                    : agentRelationships.Count
            });        }        public Task<AgentRelationshipRM> GetAgentRelationshipForPrincipal(int principalId, int agentRelationshipId)        {            ValidateAssociateExists(principalId);            ValidateAgentRelationshipExists(principalId, agentRelationshipId);            return GetAgentRelationship(agentRelationshipId);        }        public Task<UserRM> GetUserForAgentRelationship(int principalId, int agentRelationshipId, int userId)        {            ValidateAssociateExists(principalId);            AgentRelationship agentRelationship = ValidateAgentRelationshipExists(principalId, agentRelationshipId);            ValidateAgentUsersExist(agentRelationship);            return GetUser(userId);        }        public Task<IEnumerable<UserRM>> GetUsersForAgentRelationships()        {            return Task.FromResult(_mapper.Map<IEnumerable<UserRM>>(_context.AgentUsers                .Select(agentUser => _context.Users.SingleOrDefault(u => u.Id == agentUser.UserId))                .Where(user => user != null).ToList()));        }        public Task<PagedGridResult<IEnumerable<UserRM>>> GetUsersForAgentRelationship(int principalId,            int agentRelationshipId)        {            ValidateAssociateExists(principalId);            AgentRelationship agentRelationship = ValidateAgentRelationshipExists(principalId, agentRelationshipId);            IEnumerable<AgentUser> agentUsers = ValidateAgentUsersExist(agentRelationship);            List<User> users = agentUsers                .Select(agentUser => _context.Users.SingleOrDefault(u => u.Id == agentUser.UserId))                .Where(user => user != null).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<UserRM>>            {                Data = _mapper.Map<IEnumerable<UserRM>>(users),                Total = users.Count            });        }        public Task<PagedGridResult<IEnumerable<UserRM>>> GetUsersForAgentRelationship(            QueryModels.UserQueryParams queryParams)        {            List<User> users = _context.Users.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<UserRM>>            {                Data = _mapper.Map<IEnumerable<UserRM>>(users),                Total = IsPaged(queryParams)                    ? _context.Users.ApplyQuery(queryParams, false).Count()                    : users.Count            });        }        public Task<AgentRelationshipRM> GetAgentRelationship(int agentRelationshipId)        {            return Task.FromResult(                _mapper.Map<AgentRelationshipRM>(                    _context.AgentRelationships.SingleOrDefault(ar => ar.Id == agentRelationshipId)));        }        public Task<ContactRM> GetContact(int associateId, int contactId)        {            ValidateAssociateExists(associateId);            AssociateContact associateContact = _context.AssociateContacts.SingleOrDefault(ac =>                ac.ContactId == contactId && ac.AssociateId == associateId);            if (associateContact == null)                throw new InvalidOperationException("Contact not found for Associate.");            return GetContact(contactId);        }        public Task<IEnumerable<ContactRM>> GetContacts()        {            return Task.FromResult(_mapper.Map<IEnumerable<ContactRM>>(_context.Contacts.ToList()));        }        public Task<ContactRM> GetContact(int contactId)        {            return Task.FromResult(                _mapper.Map<Contact, ContactRM>(_context.Contacts.SingleOrDefault(c => c.Id == contactId)));        }        public Task<PagedGridResult<IEnumerable<ContactRM>>> GetContacts(QueryModels.ContactQueryParams queryParams)        {            List<Contact> contacts = _context.Contacts.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<ContactRM>>            {                Data = _mapper.Map<IEnumerable<ContactRM>>(contacts),                Total = IsPaged(queryParams) ? _context.Contacts.ApplyQuery(queryParams, false).Count() : contacts.Count            });        }        public Task<PagedGridResult<IEnumerable<ContactRM>>> GetContacts(int associateId)        {            ValidateAssociateExists(associateId);            List<AssociateContact> associateContacts = ValidateAssociateContactsExist(associateId);            List<Contact> contacts = associateContacts                .Select(agentContact => _context.Contacts.SingleOrDefault(u => u.Id == agentContact.ContactId))                .Where(user => user != null).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<ContactRM>>            {                Data = _mapper.Map<IEnumerable<ContactRM>>(contacts),                Total = contacts.Count            });        }        public Task<ContactConfigurationRM> GetContactConfigurationForContact(int associateId, int contactId,            int contactConfigurationId)        {            ValidateAssociateExists(associateId);            Contact contact = ValidateContactExists(contactId);            ContactConfiguration contactConfiguration =                contact.ContactConfigurations.SingleOrDefault(cc => cc.Id == contactConfigurationId);            if (contactConfiguration == null)                throw new InvalidOperationException("ContactConfiguration not found.");            return GetContactConfiguration(contactConfigurationId);        }        public Task<IEnumerable<ContactConfigurationRM>> GetContactConfigurations()        {            return Task.FromResult(_mapper.Map<IEnumerable<ContactConfigurationRM>>(_context.ContactConfigurations.ToList()));        }        public Task<PagedGridResult<IEnumerable<ContactConfigurationRM>>> GetContactConfigurations(            QueryModels.ContactConfigurationQueryParams queryParams)        {            List<ContactConfiguration> contactConfigurations = _context.ContactConfigurations.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<ContactConfigurationRM>>            {                Data = _mapper.Map<IEnumerable<ContactConfigurationRM>>(contactConfigurations),                Total = IsPaged(queryParams)                    ? _context.ContactConfigurations.ApplyQuery(queryParams, false).Count()                    : contactConfigurations.Count            });        }        public Task<PagedGridResult<IEnumerable<ContactConfigurationRM>>> GetContactConfigurationsForContact(            int associateId, int contactId)        {            ValidateAssociateExists(associateId);            Contact contact = ValidateContactExists(contactId);            IEnumerable<ContactConfiguration> contactConfigurations = contact.ContactConfigurations;            return Task.FromResult(new PagedGridResult<IEnumerable<ContactConfigurationRM>>            {                Data = _mapper.Map<IEnumerable<ContactConfigurationRM>>(contactConfigurations),                Total = contactConfigurations.Count()            });        }        public Task<ContactConfigurationRM> GetContactConfiguration(int contactConfigurationId)        {            return Task.FromResult(_mapper.Map<ContactConfiguration, ContactConfigurationRM>(                _context.ContactConfigurations.SingleOrDefault(cc => cc.Id == contactConfigurationId)));        }        public Task<CustomerRM> GetCustomer(int customerId)        {            return Task.FromResult(                _mapper.Map<Customer, CustomerRM>(_context.Customers.SingleOrDefault(c => c.Id == customerId)));        }        public Task<IEnumerable<CustomerRM>> GetCustomers()        {            return Task.FromResult(_mapper.Map<IEnumerable<CustomerRM>>(_context.Customers.ToList()));        }        public Task<PagedGridResult<IEnumerable<CustomerRM>>> GetCustomers(QueryModels.CustomerQueryParams queryParams)        {            List<Customer> customers = _context.Customers.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<CustomerRM>>            {                Data = _mapper.Map<IEnumerable<CustomerRM>>(customers),                Total = IsPaged(queryParams)                    ? _context.Customers.ApplyQuery(queryParams, false).Count()                    : customers.Count
            });        }        public Task<PagedGridResult<IEnumerable<CustomerRM>>> GetCustomers(int associateId)        {            ValidateAssociateExists(associateId);            List<AssociateCustomer> associateCustomers = ValidateAssociateCustomersExist(associateId);            List<Customer> customers = associateCustomers                .Select(agentCustomer => _context.Customers.SingleOrDefault(u => u.Id == agentCustomer.CustomerId))                .Where(user => user != null).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<CustomerRM>>            {                Data = _mapper.Map<IEnumerable<CustomerRM>>(customers),                Total = customers.Count            });        }        public Task<EMailRM> GetEMail(int eMailId)        {            return Task.FromResult(_mapper.Map<EMail, EMailRM>(_context.EMails.SingleOrDefault(e => e.Id == eMailId)));        }        public Task<IEnumerable<EMailRM>> GetEMails()        {            return Task.FromResult(_mapper.Map<IEnumerable<EMailRM>>(_context.EMails.ToList()));        }        public Task<EMailRM> GetEMailForContact(int associateId, int contactId, int eMailId)        {            ValidateAssociateExists(associateId);            ValidateContactExists(contactId);            ContactEMail contactEMail =                _context.ContactEMails.SingleOrDefault(ce => ce.ContactId == contactId && ce.EMailId == eMailId);            if (contactEMail == null)                throw new InvalidOperationException("EMail not found for Contact.");            return GetEMail(eMailId);        }        public Task<PagedGridResult<IEnumerable<EMailRM>>> GetEMailsForContact(int associateId, int contactId)        {            ValidateAssociateExists(associateId);            List<ContactEMail> contactEMails = ValidateContactEMailsExist(contactId);            List<EMail> eMails = contactEMails                .Select(contactEMail => _context.EMails.SingleOrDefault(e => e.Id == contactEMail.EMailId))                .Where(email => email != null).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<EMailRM>>            {                Data = _mapper.Map<IEnumerable<EMailRM>>(eMails),                Total = eMails.Count            });        }        public Task<EMailRM> GetEMailForAssociate(int associateId, int eMailId)        {            ValidateAssociateExists(associateId);            ValidateAssociateEMailsExist(associateId);            return GetEMail(eMailId);        }        public Task<PagedGridResult<IEnumerable<EMailRM>>> GetEMailsForAssociate(int associateId)        {            ValidateAssociateExists(associateId);            List<AssociateEMail> associateEMails = ValidateAssociateEMailsExist(associateId);            List<EMail> eMails = associateEMails                .Select(associateEMail => _context.EMails.SingleOrDefault(e => e.Id == associateEMail.EMailId))                .Where(email => email != null).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<EMailRM>>            {                Data = _mapper.Map<IEnumerable<EMailRM>>(eMails),                Total = eMails.Count            });        }        public Task<PagedGridResult<IEnumerable<EMailRM>>> GetEMails(QueryModels.EMailQueryParams queryParams)        {            List<EMail> emails = _context.EMails.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<EMailRM>>            {                Data = _mapper.Map<IEnumerable<EMailRM>>(emails),                Total = IsPaged(queryParams)                    ? _context.EMails.ApplyQuery(queryParams, false).Count()                    : emails.Count            });        }        public Task<OperatingContextRM> GetOperatingContext(int operatingContextId)        {            return Task.FromResult(_mapper.Map<OperatingContext, OperatingContextRM>(                _context.OperatingContexts.SingleOrDefault(oc => oc.Id == operatingContextId)));        }        public Task<IEnumerable<OperatingContextRM>> GetOperatingContexts()        {            return Task.FromResult(_mapper.Map<IEnumerable<OperatingContextRM>>(_context.OperatingContexts.ToList()));        }        public Task<OperatingContextRM> GetOperatingContextForCustomer(int associateId, int customerId,            int operatingContextId)        {            Associate associate = ValidateAssociateExists(associateId);            AssociateCustomer associateCustomer =                _context.AssociateCustomers.SingleOrDefault(ac =>                    ac.AssociateId == associate.Id && ac.CustomerId == customerId);            if (associateCustomer == null)                throw new InvalidOperationException("Customer not found for associate.");            CustomerOperatingContext customerOperatingContext =                _context.CustomerOperatingContexts.SingleOrDefault(coc =>                    coc.CustomerId == customerId && coc.OperatingContextId == operatingContextId);            if (customerOperatingContext == null)                throw new InvalidOperationException("OperatingContext not found for Customer.");            return GetOperatingContext(operatingContextId);        }        public Task<PagedGridResult<IEnumerable<OperatingContextRM>>> GetOperatingContexts(            QueryModels.OperatingContextQueryParams queryParams)        {            List<OperatingContext> operatingContexts = _context.OperatingContexts.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<OperatingContextRM>>            {                Data = _mapper.Map<IEnumerable<OperatingContextRM>>(operatingContexts),                Total = IsPaged(queryParams)                    ? _context.OperatingContexts.ApplyQuery(queryParams, false).Count()                    : operatingContexts.Count            });        }        public Task<OperatingContextRM> GetOperatingContextForAssociate(int associateId, int operatingContextId)        {            ValidateAssociateExists(associateId);            ValidateOperatingContextExists(operatingContextId);            AssociateOperatingContext associateOperatingContext =                _context.AssociateOperatingContexts.SingleOrDefault(ae => ae.AssociateId == associateId && ae.OperatingContextId == operatingContextId);            if (associateOperatingContext == null)                throw new InvalidOperationException("OperatingContext not found for Associate.");            return GetOperatingContext(operatingContextId);        }        public Task<PagedGridResult<IEnumerable<OperatingContextRM>>> GetOperatingContextsForAssociate(int associateId)        {            List<AssociateOperatingContext> associateOperatingContexts =                _context.AssociateOperatingContexts.FindAll(aoc => aoc.AssociateId == associateId);            if (associateOperatingContexts == null)                throw new InvalidOperationException("No Operating Contexts found for Associate.");            List<OperatingContext> operatingContexts = associateOperatingContexts                .Select(associateOperatingContext =>                    _context.OperatingContexts.SingleOrDefault(                        e => e.Id == associateOperatingContext.OperatingContextId))                .Where(operatingContext => operatingContext != null).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<OperatingContextRM>>            {                Data = _mapper.Map<IEnumerable<OperatingContextRM>>(operatingContexts),                Total = operatingContexts.Count            });        }        public Task<PagedGridResult<IEnumerable<OperatingContextRM>>> GetOperatingContextsForCustomer(int associateId,            int customerId)        {            List<CustomerOperatingContext> customerOperatingContexts =                _context.CustomerOperatingContexts.FindAll(aoc => aoc.CustomerId == customerId);            if (customerOperatingContexts == null)                throw new InvalidOperationException("No Operating Contexts found for Customer.");            List<OperatingContext> operatingContexts = customerOperatingContexts                .Select(customerOperatingContext =>                    _context.OperatingContexts.SingleOrDefault(e =>                        e.Id == customerOperatingContext.OperatingContextId))                .Where(operatingContext => operatingContext != null).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<OperatingContextRM>>            {                Data = _mapper.Map<IEnumerable<OperatingContextRM>>(operatingContexts),                Total = operatingContexts.Count            });        }        public Task<PhoneRM> GetPhone(int phoneId)        {            return Task.FromResult(                _mapper.Map<Phone, PhoneRM>(_context.Phones.SingleOrDefault(oc => oc.Id == phoneId)));        }        public Task<IEnumerable<PhoneRM>> GetPhones()        {            return Task.FromResult(_mapper.Map<IEnumerable<PhoneRM>>(_context.Phones.ToList()));        }        public Task<PhoneRM> GetPhoneForContact(int associateId, int contactId, int phoneId)        {            ValidateAssociateExists(associateId);            ValidateContactExists(contactId);            ContactPhone contactPhone =                _context.ContactPhones.SingleOrDefault(ae => ae.ContactId == contactId && ae.PhoneId == phoneId);            if (contactPhone == null)                throw new InvalidOperationException("Phone not found for Contact.");            return GetPhone(phoneId);        }        public Task<PagedGridResult<IEnumerable<PhoneRM>>> GetPhonesForContact(int associateId, int contactId)        {            ValidateAssociateExists(associateId);            ValidateContactExists(contactId);            List<ContactPhone> contactPhones = _context.ContactPhones.FindAll(cp => cp.ContactId == contactId);            if (contactPhones == null)                throw new InvalidOperationException("No phones found for Contact");            List<Phone> phones = contactPhones                .Select(contactPhone => _context.Phones.SingleOrDefault(oc => oc.Id == contactPhone.PhoneId))                .Where(phone => phone != null).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<PhoneRM>>            {                Data = _mapper.Map<IEnumerable<PhoneRM>>(phones),                Total = phones.Count            });        }        public Task<PhoneRM> GetPhoneForAssociate(int associateId, int phoneId)        {            ValidateAssociateExists(associateId);            AssociatePhone associatePhone =                _context.AssociatePhones.SingleOrDefault(ae => ae.AssociateId == associateId && ae.PhoneId == phoneId);            if (associatePhone == null)                throw new InvalidOperationException("Phone not found for associate.");            return GetPhone(phoneId);         }        public Task<PagedGridResult<IEnumerable<PhoneRM>>> GetPhonesForAssociate(int associateId)        {            ValidateAssociateExists(associateId);            List<AssociatePhone> associatePhones =                _context.AssociatePhones.FindAll(ap => ap.AssociateId == associateId);            if (associatePhones == null)                throw new InvalidOperationException("No phones found for Associate.");            List<Phone> phones = associatePhones                .Select(associatePhone => _context.Phones.SingleOrDefault(p => p.Id == associatePhone.PhoneId))                .Where(phone => phone != null).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<PhoneRM>>            {                Data = _mapper.Map<IEnumerable<PhoneRM>>(phones),                Total = phones.Count            });        }        public Task<PagedGridResult<IEnumerable<PhoneRM>>> GetPhones(QueryModels.PhoneQueryParams queryParams)        {            List<Phone> phones = _context.Phones.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<PhoneRM>>            {                Data = _mapper.Map<IEnumerable<PhoneRM>>(phones),                Total = IsPaged(queryParams)                    ? _context.Phones.ApplyQuery(queryParams, false).Count()                    : phones.Count
            });        }        public Task<RoleRM> GetRole(int roleId)        {            return Task.FromResult(_mapper.Map<Role, RoleRM>(_context.Roles.SingleOrDefault(r => r.Id == roleId)));        }        public Task<IEnumerable<RoleRM>> GetRoles()        {            return Task.FromResult(_mapper.Map<IEnumerable<RoleRM>>(_context.Roles.ToList()));        }        public Task<PagedGridResult<IEnumerable<RoleRM>>> GetRoles(QueryModels.RoleQueryParams queryParams)        {            List<Role> roles = _context.Roles.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<RoleRM>>            {                Data = _mapper.Map<IEnumerable<RoleRM>>(roles),                Total = IsPaged(queryParams) ? _context.Roles.ApplyQuery(queryParams, false).Count() : roles.Count            });        }        public Task<RoleRM> GetRoleForOperatingContext(int associateId, int operatingContextId, int roleId)        {            ValidateAssociateExists(associateId);            ValidateOperatingContextExists(operatingContextId);            OperatingContextRole operatingContextRole =                _context.OperatingContextRoles.SingleOrDefault(ocr => ocr.RoleId == roleId);            if (operatingContextRole == null)                throw new InvalidOperationException("Role not found for OperatingContext.");            return GetRole(roleId);        }        public Task<PagedGridResult<IEnumerable<RoleRM>>> GetRolesForOperatingContext(int associateId,            int operatingContextId)        {            List<OperatingContextRole> operatingContextRoles =                _context.OperatingContextRoles.FindAll(ocr => ocr.OperatingContextId == operatingContextId);            if (operatingContextRoles == null)                throw new InvalidOperationException("No Roles found for OperatingContext.");            List<Role> roles = operatingContextRoles                .Select(operatingContextRole =>                    _context.Roles.SingleOrDefault(r => r.Id == operatingContextRole.RoleId))                .Where(role => role != null).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<RoleRM>>            {                Data = _mapper.Map<IEnumerable<RoleRM>>(roles),                Total = roles.Count            });        }        public Task<EGMSPermissionRM> GetEGMSPermission(int egmsPermissionId)        {            return Task.FromResult(                _mapper.Map<EGMSPermission, EGMSPermissionRM>(                    _context.EGMSPermissions.SingleOrDefault(ep => ep.Id == egmsPermissionId)));        }        public Task<IEnumerable<EGMSPermissionRM>> GetEGMSPermissions()        {            return Task.FromResult(_mapper.Map<IEnumerable<EGMSPermissionRM>>(_context.EGMSPermissions.ToList()));        }        public Task<PagedGridResult<IEnumerable<EGMSPermissionRM>>> GetEGMSPermissionsForRole(int roleId)        {            ValidateRoleExists(roleId);            IQueryable<RoleEGMSPermission> roleEGMSPermissions =                _context.RoleEGMSPermissions.Where(rep => rep.RoleId == roleId);            if (roleEGMSPermissions == null)                throw new InvalidOperationException("No EGMSPermissions found for role.");            List<EGMSPermission> egmsPermissions = new List<EGMSPermission>();            foreach (RoleEGMSPermission roleEGMSPermission in roleEGMSPermissions)            {                EGMSPermission egmsPermission =                    _context.EGMSPermissions.SingleOrDefault(ep => ep.Id == roleEGMSPermission.EGMSPermissionId);                if (egmsPermission != null)                    egmsPermissions.Add(egmsPermission);            }            return Task.FromResult(new PagedGridResult<IEnumerable<EGMSPermissionRM>>            {                Data = _mapper.Map<IEnumerable<EGMSPermissionRM>>(egmsPermissions),                Total = egmsPermissions.Count            });        }        public Task<EGMSPermissionRM> GetEGMSPermissionForRole(int roleId, int permissionId)        {            ValidateRoleExists(roleId);            RoleEGMSPermission roleEGMSPermissions =                _context.RoleEGMSPermissions.SingleOrDefault(rep =>                    rep.RoleId == roleId && rep.EGMSPermissionId == permissionId);            if (roleEGMSPermissions == null)                throw new InvalidOperationException("EGMSPermissions not found for role.");            return GetEGMSPermission(permissionId);        }        public Task<PagedGridResult<IEnumerable<EGMSPermissionRM>>> GetEGMSPermissions(            QueryModels.EGMSPermissionQueryParams queryParams)        {            List<EGMSPermission> egmsPermissions = _context.EGMSPermissions.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<EGMSPermissionRM>>            {                Data = _mapper.Map<IEnumerable<EGMSPermissionRM>>(egmsPermissions),                Total = IsPaged(queryParams)                    ? _context.EGMSPermissions.ApplyQuery(queryParams, false).Count()                    : egmsPermissions.Count            });        }        public Task<RoleEGMSPermissionRM> GetRoleEGMSPermission(int roleEGMSPermissionId)        {            return Task.FromResult(_mapper.Map<RoleEGMSPermission, RoleEGMSPermissionRM>(                _context.RoleEGMSPermissions.SingleOrDefault(rep => rep.Id == roleEGMSPermissionId)));        }        public Task<IEnumerable<RoleEGMSPermissionRM>> GetRoleEGMSPermissions()        {            return Task.FromResult(_mapper.Map<IEnumerable<RoleEGMSPermissionRM>>(_context.RoleEGMSPermissions.ToList()));        }        public Task<PagedGridResult<IEnumerable<RoleEGMSPermissionRM>>> GetRoleEGMSPermissions(            QueryModels.RoleEGMSPermissionQueryParams queryParams)        {            List<RoleEGMSPermission> roleEGMSPermissions =                _context.RoleEGMSPermissions.ApplyQuery(queryParams).ToList();                        return Task.FromResult(new PagedGridResult<IEnumerable<RoleEGMSPermissionRM>>            {                Data = _mapper.Map<IEnumerable<RoleEGMSPermissionRM>>(roleEGMSPermissions),                Total = IsPaged(queryParams)                    ? _context.RoleEGMSPermissions.ApplyQuery(queryParams, false).Count()                    : roleEGMSPermissions.Count
            });        }        public Task<UserRM> GetUser(int userId)        {            return Task.FromResult(_mapper.Map<User, UserRM>(_context.Users.SingleOrDefault(a => a.Id == userId)));        }        public Task<IEnumerable<UserRM>> GetUsers()        {            return Task.FromResult(_mapper.Map<IEnumerable<UserRM>>(_context.Users.ToList()));        }        public Task<UserRM> GetUserForAssociate(int associateId, int userId)        {            ValidateAssociateExists(associateId);            AssociateUser associateUser =                _context.AssociateUsers.SingleOrDefault(au => au.AssociateId == associateId && au.UserId == userId);            if (associateUser == null)                throw new InvalidOperationException("User not found for associate.");            return GetUser(userId);         }        public Task<PagedGridResult<IEnumerable<UserRM>>> GetUsers(QueryModels.UserQueryParams queryParams)        {            List<User> users = _context.Users.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<UserRM>>            {                Data = _mapper.Map<IEnumerable<UserRM>>(users),                Total = IsPaged(queryParams) ? _context.Users.ApplyQuery(queryParams, false).Count() : users.Count            });        }        public Task<PagedGridResult<IEnumerable<UserRM>>> GetUsersForAssociate(int associateId)        {            ValidateAssociateExists(associateId);            List<AssociateUser> associateUsers = _context.AssociateUsers.FindAll(au => au.AssociateId == associateId);            if (associateUsers == null)                throw new InvalidOperationException("Users not found for Associate.");            List<User> users = associateUsers                .Select(associateUser => _context.Users.SingleOrDefault(u => u.Id == associateUser.UserId))                .Where(user => user != null).ToList();            return GetSimplePagedGridFromResult<List<User>, UserRM>(users, users.Count);        }        public Task<IEnumerable<CertificationRM>> GetCertifications()        {            return Task.FromResult(_mapper.Map<IEnumerable<CertificationRM>>(_context.Certifications.ToList()));        }        public Task<PagedGridResult<IEnumerable<CertificationRM>>> GetCertifications(            QueryModels.CertificationQueryParams queryParams)        {            List<Certification> certifications = _context.Certifications.ApplyQuery(queryParams).ToList();            return Task.FromResult(new PagedGridResult<IEnumerable<CertificationRM>>            {                Data = _mapper.Map<IEnumerable<CertificationRM>>(certifications),                Total = IsPaged(queryParams)                    ? _context.Certifications.ApplyQuery(queryParams, false).Count()                    : certifications.Count
            });        }        public Task<CertificationRM> GetCertificationForOperatingContext(int associateId, int operatingContextId,            int certificationId)        {            ValidateAssociateExists(associateId);            OperatingContext operatingContext = ValidateOperatingContextExists(operatingContextId);            return Task.FromResult(_mapper.Map<Certification, CertificationRM>(                _context.Certifications.SingleOrDefault(c => c.Id == operatingContext.CertificationId && c.Id == certificationId)));        }        #region Helper Methods        private Associate ValidateAssociateExists(int associateId)        {            Associate associate = _context.Associates.SingleOrDefault(a => a.Id == associateId);            if (associate == null)                throw new InvalidOperationException("Associate not found.");            return associate;        }        private OperatingContext ValidateOperatingContextExists(int operatingContextId)        {            OperatingContext operatingContext =                _context.OperatingContexts.SingleOrDefault(a => a.Id == operatingContextId);            if (operatingContext == null)                throw new InvalidOperationException("OperatingContext not found.");            return operatingContext;        }        private void ValidateRoleExists(int roleId)        {            Role role = _context.Roles.SingleOrDefault(r => r.Id == roleId);            if (role == null)                throw new InvalidOperationException("Role not found.");        }        private Contact ValidateContactExists(int contactId)        {            Contact contact = _context.Contacts.SingleOrDefault(c => c.Id == contactId);            if (contact == null)                throw new InvalidOperationException("Contact not found.");            return contact;        }        private AgentRelationship ValidateAgentRelationshipExists(int principalId, int agentRelationshipId)        {            AgentRelationship agentRelationship =                _context.AgentRelationships.SingleOrDefault(ar =>                    ar.PrincipalId == principalId && ar.Id == agentRelationshipId);            if (agentRelationship == null)                throw new InvalidOperationException("Agent relationship not found for specified principal.");            return agentRelationship;        }        private List<AssociateAddress> ValidateAssociateAddressesExist(int associateId)        {             List<AssociateAddress> associateAddresses = _context.AssociateAddresses.FindAll(aa => aa.AssociateId == associateId);            if (associateAddresses == null)                throw new InvalidOperationException("No addresses found for specified associate.");            return associateAddresses;        }        private List<ContactAddress> ValidateContactAddressesExist(int contactId)        {            List<ContactAddress> contactAddresses = _context.ContactAddresses.FindAll(ca => ca.ContactId == contactId);            if (contactAddresses == null)                throw new InvalidOperationException("No addresses found for contact.");            return contactAddresses;        }        private List<ContactEMail> ValidateContactEMailsExist(int contactId)        {            List<ContactEMail> contactEMails = _context.ContactEMails.FindAll(ca => ca.ContactId == contactId);            if (contactEMails == null)                throw new InvalidOperationException("No emails found for contact.");            return contactEMails;        }        private List<AgentUser> ValidateAgentUsersExist(AgentRelationship agentRelationship)        {            List<AgentUser> agentUsers = _context.AgentUsers.Where(au => au.AgentId == agentRelationship.AgentId).ToList();            if (agentUsers == null)                throw new InvalidOperationException("Users not found for AgentRelationship.");            return agentUsers;        }        private List<AssociateContact> ValidateAssociateContactsExist(int associateId)        {            List<AssociateContact> associateContacts = _context.AssociateContacts.Where(au => au.AssociateId == associateId).ToList();            if (associateContacts == null)                throw new InvalidOperationException("Contacts not found for associate.");            return associateContacts;        }        private List<AssociateEMail> ValidateAssociateEMailsExist(int associateId)        {            List<AssociateEMail> associateEMails = _context.AssociateEMails.Where(au => au.AssociateId == associateId).ToList();            if (associateEMails == null)                throw new InvalidOperationException("EMails not found for Associate.");            return associateEMails;        }        private List<AssociateCustomer> ValidateAssociateCustomersExist(int associateId)        {            List<AssociateCustomer> associateCustomers = _context.AssociateCustomers.Where(au => au.AssociateId == associateId).ToList();            if (associateCustomers == null)                throw new InvalidOperationException("Customers not found for Associate.");            return associateCustomers;        }        private bool IsPaged(QueryModels.BaseQueryParams baseQueryParams)        {            return baseQueryParams.Page != null && baseQueryParams.PageSize != null;        }        private Task<PagedGridResult<IEnumerable<TU>>> GetSimplePagedGridFromResult<T, TU>(T input, int count)        {            return Task.FromResult(new PagedGridResult<IEnumerable<TU>>            {                Data = _mapper.Map<IEnumerable<TU>>(input),                Total = count            });        }        #endregion    }}